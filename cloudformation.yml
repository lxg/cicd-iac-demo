AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  lambdaBucket:
    Type: String
  lambdaFile:
    Type: String
  apiGatewayStageName:
    Type: String
    Default: api

Resources:
  lambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}:*"
          PolicyName: "lambda"

  lambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref lambdaBucket
        S3Key: !Ref lambdaFile
      Environment:
        Variables:
          NODE_ENV: production
          PATH_PREFIX: !Sub "/${apiGatewayStageName}"
      FunctionName: !Ref AWS::StackName
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt lambdaRole.Arn
      Runtime: "nodejs18.x"
      Timeout: 10

  lambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}"
      RetentionInDays: 7

  apigw:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Ref AWS::StackName
      ProtocolType: HTTP

  apigwStage:
    Type: "AWS::ApiGatewayV2::Stage"
    Properties:
      ApiId: !Ref apigw
      StageName: !Ref apiGatewayStageName
      AutoDeploy: true
      DefaultRouteSettings:
        DetailedMetricsEnabled: true
        DataTraceEnabled: false
        ThrottlingBurstLimit: 10
        ThrottlingRateLimit: 10

  apigwInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apigw}/*/*/*"

  apigwIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref apigw
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaFunction.Arn}/invocations"

  apigwRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apigw
      RouteKey: "GET /{req+}"
      Target: !Sub "integrations/${apigwIntegration}"

Outputs:
  apiGatewayUrl:
    Value: !Sub "https://${apigw}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}"
